ultima <- ultima + 1
##### Eveluar condiciones de primer
# Patrones
tripletes <- trinucleotideFrequency(primer_fd)
patrones_malos <- tripletes [c(22, 43, 44, 16, 41, 49, 61)]
no_hay <- c(0,0,0,0,0,0,0)
comparacion <- all(patrones_malos == no_hay)
if (comparacion == TRUE) { #Seguir evaluando el primer
# Porcentage de CG
longt <- width(primer_fd)
cont_cg <- letterFrequency(primer_fd, "CG")
porc_cg <- (cont_cg / longt) * 100
if (porc_cg < 60 & porc_cg > 49) {#Seguir evaluando
#Temperatura: 55 - 65 °C
cont_cg <- letterFrequency(primer_fd, "CG")
cont_at <- letterFrequency(primer_fd, "AT")
temperatura <- (4*cont_cg) + (2*cont_at)
if (temperatura >54 & temperatura <66 ) {
mensaje <- paste("Porcentaje de CG:", porc_cg, "Tm:", temperatura)
primer <- (list (list(primer = primer_fd, mensaje = mensaje)))
}
}
}
}
return (primer)
}
primer_fw (32, secun_prueba1) #poner el valor de  interger, donde está el codón ATG
#Como estaban en una lista, se extraen individualmente
fw_secuencia <- lapply (forward_primer, forward_primer$primer)
#Como estaban en una lista, se extraen individualmente
fw_secuencia <- lapply (forward_primer, forward_primer[[1]])
print (fw_secuencia)
fw_mnsj <- lapply (forward_primer, forward_primer$mensaje)
#Como estaban en una lista, se extraen individualmente
fw_secuencia <- lapply (forward_primer, forward_primer[1])
#Guardar como objeto
forward_primer <- primer_fw (32, secun_prueba1)
print(forward_primer) #esto muestra 3 objetos de la lista
#Como estaban en una lista, se extraen individualmente
fw_secuencia <- lapply (forward_primer, forward_primer[[1]])
print (fw_secuencia)
#Guardar como objeto
forward_primer <- primer_fw (32, secun_prueba1)
print(forward_primer) #esto muestra 3 objetos de la lista
fw_secuencia <- lapply(forward_primers, function(x) x$primer)
fw_secuencia <- lapply(forward_primer, function(x) x$primer)
print (fw_secuencia)
class(fw_secuencia)
#Guardar en un objeto
tga_rv_primer <- primer_rev_ct1(114,revertida)
#Obtener secuencia individual
fw_secuencia <- lapply (tga_rv_primer, function(x) x$primer)
#Como están en una lista, se extraigo individualmente la secuencia
fw_secuencia <- lapply(forward_primer, function(x) x$primer)
print (fw_secuencia)
class(fw_secuencia)
#Obtener secuencia individual
tga_secuencia <- lapply (tga_rv_primer, function(x) x$primer)
print (tga_secuencia)
primer_rev_ct1 <- function (tga1,secrev) {
primer <- list ()
detener <- tga1 - 20
inicio <- 0
ultima <- 20
while (inicio <= detener & ultima < tga1 ) {
inicio <- inicio + 1
primer_rv<- subseq(revertida, start=inicio, end=ultima)
ultima <- ultima + 1
final<-complement(primer_rv) #la secuencia complentaria
tripletes <- trinucleotideFrequency (final)#revisar patrones indeseados
patrones_malos <- tripletes[c(22, 43, 44, 16, 41, 49, 61)]
no_hay <- c(0,0,0,0,0,0,0)
comparacion <- all(patrones_malos == no_hay)
tolerancia<- sum(patrones_malos!=0)
if (comparacion == TRUE | tolerancia == 1) { #Si no están esos patrones que siga evaluando
longt <- width (primer_rv)#revisar %gc
cont_cg <- letterFrequency(primer_rv, "CG")
porc_cg <- (cont_cg / longt) * 100
if (porc_cg < 60 & porc_cg > 49){
cont_cg <- letterFrequency(primer_rv, "CG")
cont_at <- letterFrequency(primer_rv, "AT")
temperatura <- (4*cont_cg) + (2*cont_at) ##Tm
if (temperatura >54 & temperatura <66 ) {
mensaje <- paste("Porcentaje de CG:", porc_cg, "Tm:", temperatura)
primer <- (list (list(primer = primer_fd, mensaje = mensaje)))
}
}
}
}
return (primer)
}
primer_rev_ct1(114,revertida) #primers con TGA
primer_rev_ct1 <- function (tga1,secrev) {
primer <- list ()
detener <- tga1 - 20
inicio <- 0
ultima <- 20
while (inicio <= detener & ultima < tga1 ) {
inicio <- inicio + 1
primer_rv<- subseq(revertida, start=inicio, end=ultima)
ultima <- ultima + 1
final<-complement(primer_rv) #la secuencia complentaria
tripletes <- trinucleotideFrequency (final)#revisar patrones indeseados
patrones_malos <- tripletes[c(22, 43, 44, 16, 41, 49, 61)]
no_hay <- c(0,0,0,0,0,0,0)
comparacion <- all(patrones_malos == no_hay)
tolerancia<- sum(patrones_malos!=0)
if (comparacion == TRUE | tolerancia == 1) { #Si no están esos patrones que siga evaluando
longt <- width (primer_rv)#revisar %gc
cont_cg <- letterFrequency(primer_rv, "CG")
porc_cg <- (cont_cg / longt) * 100
if (porc_cg < 60 & porc_cg > 49){
cont_cg <- letterFrequency(primer_rv, "CG")
cont_at <- letterFrequency(primer_rv, "AT")
temperatura <- (4*cont_cg) + (2*cont_at) ##Tm
if (temperatura >54 & temperatura <66 ) {
mensaje <- paste("Porcentaje de CG:", porc_cg, "Tm:", temperatura)
primer <- (list (list(primer = primer_rv, mensaje = mensaje)))
}
}
}
}
return (primer)
}
primer_rev_ct1(114,revertida) #primers con TGA
#Guardar en un objeto
tga_rv_primer <- primer_rev_ct1(114,revertida)
#Obtener secuencia individual
tga_secuencia <- lapply (tga_rv_primer, function(x) x$primer)
print (tga_secuencia)
class(tga_secuencia)
primer_rev_ct2 <- function(tag1,secrev) {
primer <- list ()
detener <- tag1 - 17
inicio <- 0
ultima <- 17
while (inicio <= detener & ultima < tag1 ) {
inicio <- inicio + 1
primer_rv<- subseq(revertida, start=inicio, end=ultima)
ultima <- ultima + 1
final<-complement(primer_rv)##secuencia complementaria
tripletes <- trinucleotideFrequency(primer_rv)#revisar patrones indeseados
patrones_malos <- tripletes [c(22, 43, 44, 16, 41, 49, 61)]
no_hay <- c(0,0,0,0,0,0,0)
comparacion <- all(patrones_malos == no_hay)
tolerancia<-sum(patrones_malos!=0)#Más complejo que se cumplan requerimientos
if (comparacion == TRUE | tolerancia==1) { #Seguir evaluando el primer
# Poct de CG
longt <- width(primer_rv)
cont_cg <- letterFrequency(primer_rv, "CG")
porc_cg <- (cont_cg / longt) * 100
if (porc_cg < 60 & porc_cg > 49) {##%gc
cont_cg <- letterFrequency(primer_rv, "CG")
cont_at <- letterFrequency(primer_rv, "AT")
temperatura <- (4*cont_cg) + (2*cont_at) ##Tm
if (temperatura >54 & temperatura <66 ) {
mensaje <- paste("Porcentaje de CG:", porc_cg, "Tm:", temperatura)
primer <- (list (list(primer = primer_rv, mensaje = mensaje)))
}
}
}
}
return (primer)
}
primer_rev_ct2 (53,revertida) #sujeto a que tenga este patrón
primer_rev_ct2 (53,revertida) #sujeto a que tenga este patrón
primer_rev_ct2 <- function(tag1,secrev) {
primer <- list ()
detener <- tag1 - 17
inicio <- 0
ultima <- 17
while (inicio <= detener & ultima < tag1 ) {
inicio <- inicio + 1
primer_rv<- subseq(revertida, start=inicio, end=ultima)
ultima <- ultima + 1
final<-complement(primer_rv)##secuencia complementaria
tripletes <- trinucleotideFrequency(primer_rv)#revisar patrones indeseados
patrones_malos <- tripletes [c(22, 43, 44, 16, 41, 49, 61)]
no_hay <- c(0,0,0,0,0,0,0)
comparacion <- all(patrones_malos == no_hay)
tolerancia<-sum(patrones_malos!=0)#Más complejo que se cumplan requerimientos
if (comparacion == TRUE | tolerancia==1) { #Seguir evaluando el primer
# Poct de CG
longt <- width(primer_rv)
cont_cg <- letterFrequency(primer_rv, "CG")
porc_cg <- (cont_cg / longt) * 100
if (porc_cg < 60 & porc_cg > 49) {##%gc
cont_cg <- letterFrequency(primer_rv, "CG")
cont_at <- letterFrequency(primer_rv, "AT")
temperatura <- (4*cont_cg) + (2*cont_at) ##Tm
if (temperatura >54 & temperatura <66 ) {
mensaje <- paste ("Porcentaje de CG:", porc_cg, "Tm:", temperatura)
primer <- (list (list (primer = primer_rv, mensaje = mensaje)))
}
}
}
}
return (primer)
}
primer_rev_ct2 (53,revertida) #sujeto a que tenga este patrón
tga_rv_primer[[1]]$primer
#Obtener secuencia individual
tga_secuencia <- tga_rv_primer[[1]]$primer
print (tga_secuencia)
class(tga_secuencia)
vmatchPattern("GAT",revertida)-> tag
tag
primer_rev_ct2 <- function(tag1,secrev) {
primer <- list ()
detener <- tag1 - 17
inicio <- 0
ultima <- 17
while (inicio <= detener & ultima < tag1 ) {
inicio <- inicio + 1
primer_rv<- subseq(revertida, start=inicio, end=ultima)
ultima <- ultima + 1
final<-complement(primer_rv)##secuencia complementaria
tripletes <- trinucleotideFrequency(primer_rv)#revisar patrones indeseados
patrones_malos <- tripletes [c(22, 43, 44, 16, 41, 49, 61)]
no_hay <- c(0,0,0,0,0,0,0)
comparacion <- all(patrones_malos == no_hay)
tolerancia<-sum(patrones_malos!=0)#Más complejo que se cumplan requerimientos
if (comparacion == TRUE | tolerancia==1) { #Seguir evaluando el primer
# Poct de CG
longt <- width(primer_rv)
cont_cg <- letterFrequency(primer_rv, "CG")
porc_cg <- (cont_cg / longt) * 100
if (porc_cg < 60 & porc_cg > 49) {##%gc
cont_cg <- letterFrequency(primer_rv, "CG")
cont_at <- letterFrequency(primer_rv, "AT")
temperatura <- (4*cont_cg) + (2*cont_at) ##Tm
if (temperatura >54 & temperatura <66 ) {
mensaje <- paste ("Porcentaje de CG:", porc_cg, "Tm:", temperatura)
primer <- (list (list (primer = primer_rv, mensaje = mensaje)))
}
}
}
}
return (primer)
}
primer_rev_ct2 (53,revertida) #sujeto a que tenga este patrón
#Guardar en un objeto
tag_rv_primer <- primer_rev_ct2 (114,revertida)
class(tag)
class(tag_rv_primer)
print(tag_rv_primer)
#Obtener secuencia individual
tag_secuencia <- (tag_rv_primer[[1]]$primer)
print (tag_secuencia)
class(tag_secuencia)
#Guardar en un objeto
tag_rv_primer <- primer_rev_ct2 (53,revertida)
#Obtener secuencia individual
tag_secuencia <- (tag_rv_primer[[1]]$primer)
print (tag_secuencia)
class(tag_secuencia)
primer_rev_ct2 (53,revertida) #sujeto a que tenga este patrón
vmatchPattern("GAT",revertida)-> tag
tag
primer_rev_ct2 <- function(tag1,secrev) {
primer <- list ()
detener <- tag1 - 17
inicio <- 0
ultima <- 17
while (inicio <= detener & ultima < tag1 ) {
inicio <- inicio + 1
primer_rv<- subseq(revertida, start=inicio, end=ultima)
ultima <- ultima + 1
final<-complement(primer_rv)##secuencia complementaria
tripletes <- trinucleotideFrequency(primer_rv)#revisar patrones indeseados
patrones_malos <- tripletes [c(22, 43, 44, 16, 41, 49, 61)]
no_hay <- c(0,0,0,0,0,0,0)
comparacion <- all(patrones_malos == no_hay)
tolerancia<-sum(patrones_malos!=0)#Más complejo que se cumplan requerimientos
if (comparacion == TRUE | tolerancia==1) { #Seguir evaluando el primer
# Poct de CG
longt <- width(primer_rv)
cont_cg <- letterFrequency(primer_rv, "CG")
porc_cg <- (cont_cg / longt) * 100
if (porc_cg < 60 & porc_cg > 49) {##%gc
cont_cg <- letterFrequency(primer_rv, "CG")
cont_at <- letterFrequency(primer_rv, "AT")
temperatura <- (4*cont_cg) + (2*cont_at) ##Tm
if (temperatura >54 & temperatura <66 ) {
mensaje <- paste ("Porcentaje de CG:", porc_cg, "Tm:", temperatura)
primer <- (list (list (primer = primer_rv, mensaje = mensaje)))
}
}
}
}
return (primer)
}
primer_rev_ct2 (53,revertida) #sujeto a que tenga este patrón
primer_rev_ct2 <- function(tag1,secrev) {
primer <- list ()
detener <- tag1 - 17
inicio <- 0
ultima <- 17
while (inicio <= detener & ultima < tag1 ) {
inicio <- inicio + 1
primer_rv<- subseq(revertida, start=inicio, end=ultima)
ultima <- ultima + 1
final<-complement(primer_rv)##secuencia complementaria
tripletes <- trinucleotideFrequency(primer_rv)#revisar patrones indeseados
patrones_malos <- tripletes [c(22, 43, 44, 16, 41, 49, 61)]
no_hay <- c(0,0,0,0,0,0,0)
comparacion <- all(patrones_malos == no_hay)
tolerancia<-sum(patrones_malos!=0)#Más complejo que se cumplan requerimientos
if (comparacion == TRUE | tolerancia==1) { #Seguir evaluando el primer
# Poct de CG
longt <- width(primer_rv)
cont_cg <- letterFrequency(primer_rv, "CG")
porc_cg <- (cont_cg / longt) * 100
if (porc_cg < 60 & porc_cg > 49) {##%gc
cont_cg <- letterFrequency(primer_rv, "CG")
cont_at <- letterFrequency(primer_rv, "AT")
temperatura <- (4*cont_cg) + (2*cont_at) ##Tm
if (temperatura >54 & temperatura <66 ) {
mensaje <- paste ("Porcentaje de CG:", porc_cg, "Tm:", temperatura)
primer <- ( list (
list (primer = primer_rv, mensaje = mensaje))
)
}
}
}
}
return (primer)
}
primer_rev_ct2 (53,revertida) #sujeto a que tenga este patrón
primer_rev_ct2 <- function(tag1,secrev) {
primers <- list ()
detener <- tag1 - 17
inicio <- 0
ultima <- 17
while (inicio <= detener & ultima < tag1 ) {
inicio <- inicio + 1
primer_rv<- subseq(revertida, start=inicio, end=ultima)
ultima <- ultima + 1
final<-complement(primer_rv)##secuencia complementaria
tripletes <- trinucleotideFrequency(primer_rv)#revisar patrones indeseados
patrones_malos <- tripletes [c(22, 43, 44, 16, 41, 49, 61)]
no_hay <- c(0,0,0,0,0,0,0)
comparacion <- all(patrones_malos == no_hay)
tolerancia<-sum(patrones_malos!=0)#Más complejo que se cumplan requerimientos
if (comparacion == TRUE | tolerancia==1) { #Seguir evaluando el primer
# Poct de CG
longt <- width(primer_rv)
cont_cg <- letterFrequency(primer_rv, "CG")
porc_cg <- (cont_cg / longt) * 100
if (porc_cg < 60 & porc_cg > 49) {##%gc
cont_cg <- letterFrequency(primer_rv, "CG")
cont_at <- letterFrequency(primer_rv, "AT")
temperatura <- (4*cont_cg) + (2*cont_at) ##Tm
if (temperatura >54 & temperatura <66 ) {
mensaje <- paste ("Porcentaje de CG:", porc_cg, "Tm:", temperatura)
primers <- ( list (
list (primer = primer_rv, mensaje = mensaje))
)
}
}
}
}
return (primers)
}
primer_rev_ct2 (53,revertida) #sujeto a que tenga este patrón
primer_rev_ct2 <- function(tag1,secrev) {
primers <- list ()
detener <- tag1 - 17
inicio <- 0
ultima <- 17
while (inicio <= detener & ultima < tag1 ) {
inicio <- inicio + 1
primer_rv<- subseq(revertida, start=inicio, end=ultima)
ultima <- ultima + 1
final<-complement(primer_rv)##secuencia complementaria
tripletes <- trinucleotideFrequency(primer_rv)#revisar patrones indeseados
patrones_malos <- tripletes [c(22, 43, 44, 16, 41, 49, 61)]
no_hay <- c(0,0,0,0,0,0,0)
comparacion <- all(patrones_malos == no_hay)
tolerancia<-sum(patrones_malos!=0)#Más complejo que se cumplan requerimientos
if (comparacion == TRUE | tolerancia==1) { #Seguir evaluando el primer
# Poct de CG
longt <- width(primer_rv)
cont_cg <- letterFrequency(primer_rv, "CG")
porc_cg <- (cont_cg / longt) * 100
if (porc_cg < 60 & porc_cg > 49) {##%gc
cont_cg <- letterFrequency(primer_rv, "CG")
cont_at <- letterFrequency(primer_rv, "AT")
temperatura <- (4*cont_cg) + (2*cont_at) ##Tm
if (temperatura >54 & temperatura <66 ) {
mensaje <- paste ("Porcentaje de CG:", porc_cg, "Tm:", temperatura)
primers <- c( primers, list (
list (primer = primer_rv, mensaje = mensaje))
)
}
}
}
}
return (primers)
}
primer_rev_ct2 (53,revertida) #sujeto a que tenga este patrón
######Primers con TAA
vmatchPattern("AAT",revertida)->taa
taa
primer_rev_ct3 <- function(taa1,secrev) {
primer <- list()
detener <- taa1 - 20
inicio <- 0
ultima <- 20
while (inicio <= detener & ultima < taa1 ) {
inicio <- inicio + 1
primer_rv<- subseq(revertida, start=inicio, end=ultima)
ultima <- ultima + 1
tripletes <- trinucleotideFrequency(primer_rv)#revisar patrones indeseados
patrones_malos <- tripletes[c(22, 43, 44, 16, 41, 49, 61)]
no_hay <- c(0,0,0,0,0,0,0)
comparacion <- all(patrones_malos == no_hay)
if (comparacion == TRUE) { #Seguir evaluando el primer
# Poct de CG
longt <- width(primer_rv)
cont_cg <- letterFrequency(primer_rv, "CG")
porc_cg <- (cont_cg / longt) * 100
if (porc_cg < 60 & porc_cg > 49) {##%gc
cont_cg <- letterFrequency(primer_rv, "CG")
cont_at <- letterFrequency(primer_rv, "AT")
temperatura <- (4*cont_cg) + (2*cont_at) ##Tm
if (temperatura >54 & temperatura <66 ) {
mensaje <- paste("Porcentaje de CG:", porc_cg, "Tm:", temperatura)
primer <- (list (list (primer = primer_rv, mensaje = mensaje)))
}
}
}
}
return (primer)
}
primer_rev_ct3 (37,revertida)
#Guardar en un objeto
taa_rv_primer <- primer_rev_ct3 (37,revertida)
#Obtener secuencia individual
taa_secuencia <- (taa_rv_primer[[1]]$primer)
print (taa_secuencia)
class(taa_secuencia)
vmatchPattern("GAT",revertida)-> tag
tag
print (tag)
vmatchPattern("GAT",revertida)-> tag
vmatchPattern ("GAT", revertida)-> tag
print (tag)
vmatchPattern("GAT",revertida)->tag
tag
class(taa_secuencia)
todos2 <- list (
list (nombre = forward primer, secuencia = fw_secuencia),
todos2 <- list (
list (nombre = "forward primer", secuencia = fw_secuencia),
list (nombre = "tga_rv_primer", secuecnia = tga_rv_primer),
list (nombre = "taa_rv_primer", secuecnia = taa_rv_primer)
)
todos2
todos2 <- list (
list (nombre = "forward primer", secuencia = fw_secuencia),
list (nombre = "tga_rv_primer", secuecnia = tga_secuencia),
list (nombre = "taa_rv_primer", secuecnia = taa_secuencia)
)
todos2
lista_primers <- list (
list (nombre = "Forward primer", secuencia = fw_secuencia),
list (nombre = "Reverse primer - TGA", secuencia = tga_secuencia),
list (nombre = "Reverse primer - TAA", secuencia = taa_secuencia)
)
lista_primers
lista_secuencias <- lapply(lista_primers, lista_primers[[1]]$secuencia)
lista_secuencias <- lapply (lista_primers, lista_primers$secuencia)
lista_nombres <- sapply (lista_primers, lista_primers$nombre)
#sequinr los lee como listas
install.packages ("seqinr")
library (seqinr)
#Se separan los nombres de las secuencias para poder reescribirlos en un archivo FASTA
lista_secuencias <- lapply (lista_primers, lista_primers$secuencia)
#Se separan los nombres de las secuencias para poder reescribirlos en un archivo FASTA
lista_primers$secuencia
#Se separan los nombres de las secuencias para poder reescribirlos en un archivo FASTA
lista_primers[[1]]$secuencia
#Se separan los nombres de las secuencias para poder reescribirlos en un archivo FASTA
lista_primers[[2]]$secuencia
#Se separan los nombres de las secuencias para poder reescribirlos en un archivo FASTA
lista_secuencias <- c (lista_primers[[1]]$secuencia, lista_primers[[2]]$secuencia, lista_primers[[3]]$secuencia)
print(lista_secuencias)
class(lista_secuencias)
lista_nombres <- c(lista_primers[[1]]$nombre, lista_primers[[2]]$nombre, lista_primers[[3]]$nombre)
lista_nombres <- c(lista_primers[[1]]$nombre, lista_primers[[2]]$nombre, lista_primers[[3]]$nombre)
print (lista_nombres)
print (lista_nombres)
write.fasta (sequences = lista_secuencias, names = lista_nombres, nbchar = 80, file.out = "primers.fasta")
write.fasta (sequences = lista_secuencias, names = lista_nombres, nbchar = 80, file.out = "resultados/primers.fasta")
write.fasta (sequences = lista_secuencias, names = lista_nombres, nbchar = 80, file.out = "resultados/primers.fasta")
write.fasta (sequences = lista_secuencias, names = lista_nombres, nbchar = 80, file.out = "resultados/primers.fasta")
write.fasta (sequences = lista_secuencias, names = lista_nombres, nbchar = 80, file.out = "Users/julie/OneDrive/Escritorio/R/Bioinformática/Creacion_de_primers/resultados/primers.fasta")
print(lista_secuencias)
print (lista_nombres)
write.fasta (sequences = lista_secuencias, names = lista_nombres, nbchar = 80, file.out = "Users/julie/OneDrive/Escritorio/R/Bioinformática/Creacion_de_primers/resultados/primers.fasta")
write.fasta (sequences = lista_secuencias, names = lista_nombres, nbchar = 80, file.out = "/R/Bioinformática/Creacion_de_primers/resultados/primers.fasta")
write.fasta (sequences = lista_secuencias, names = lista_nombres, nbchar = 80, file.out = "/resultados/primers.fasta")
write.fasta (sequences = lista_secuencias, names = lista_nombres, nbchar = 80, file.out = "primers.fasta")
#intenté mandarlo a resultados, pero los sigue mandando a scripts
dir.exists(resultados)
#intenté mandarlo a resultados, pero los sigue mandando a scripts
dir.exists("resultados")
dir.create("resultados")
dir.exists("resultados")
write.fasta (sequences = lista_secuencias, names = lista_nombres, nbchar = 80, file.out = "resultados/primers.fasta")
write.fasta (sequences = lista_secuencias, names = lista_nombres, nbchar = 80, file.out = "resultados/primers.fasta")
