}
# Para encontar la secuencia anterior al codon de inicio
# Verificar el largo de la secuencia
longt <- width(secun_prueba)
if ( longt < 20000) {
print("correcto")
} else {
print("muy larga")
}
# Codon de inicio: TAC
codon_in <- vmatchPattern("TAC", secun_prueba)
print(codon_in[[1]][1])
detener <- 72
inicio <- 0
ultima <- 20
while (inicio <= detener & ultima < 92 ) {
inicio <- inicio + 1
primer_fd <- subseq(secun_prueba, start=inicio, end=ultima)
print(primer_fd)
ultima <- ultima + 1
##### Eveluar condiciones de primer
}
all(patrones_malos == 0)
detener <- 72
inicio <- 0
ultima <- 20
while (inicio <= detener & ultima < 92 ) {
inicio <- inicio + 1
primer_fd <- subseq(secun_prueba, start=inicio, end=ultima)
ultima <- ultima + 1
##### Eveluar condiciones de primer
# Patrones
tripletes <- trinucleotideFrequency(primer_fd)
patrones_malos <- tripletes[c(22, 43, 44, 16, 41, 49, 61)]
no_hay <- c(0,0,0,0,0,0,0)
comparacion <- all(patrones_malos == no_hay)
if (comparacion == TRUE) { #Seguir evaluando el primer
# Poct de CG
longt <- width(primer_fd)
cont_cg <- letterFrequency(primer_fd, "CG")
porc_cg <- (cont_cg / longt) * 100
if (porc_cg < 60 & porc_cg > 49) {#Seguir evaluando
#Temperatura: 55 - 65 째C
cont_cg <- letterFrequency(primer_fd, "CG")
cont_at <- letterFrequency(primer_fd, "AT")
temperatura <- (4*cont_cg) + (2*cont_at)
if (temperatura >54 & temperatura <66 ) {
print(primer_fd)
print(paste("Porcentaje de CG: ", porc_cg))
print(paste("Tm: ", temperatura))
}
}
}
}
primer_fd
# Codon de inicio: TAC -> ATG
codon_in <- vmatchPattern("ATG", secun_prueba)
print(codon_in[[1]][1])
## Generador de secuencias. Desplazamiento del marco de lect de n+1 a 20
detener <- 72
print(codon_in[[1]][1])
prompt(hola)
prompt("hola")
prompt(print("hola: "))
print(prompt("hola: "))
print(prompt("numero: "))
print(codon_in[[1]][1])
inicio_codon <- readline(prompt = "Secuencia de inicio (start):" )
secun_prueba <- readDNAStringSet("extras/sequence2.fasta")
secun_prueba
tipo_sec <- class(secun_prueba)
tipo_sec[1]
# Para evaluar tp de secuencia
if (tipo_sec[1] == "DNAStringSet") {
print("correcto")
} else {
print("Convierte tu secuencia a DNA")
}
# Comprobar que no es degenerado
no_degenerado <- alphabetFrequency(secun_prueba, baseOnly=TRUE)
no_degenerado[5]
if (no_degenerado[5] == 0) {
print("correcto")
} else {
print("Convierte tu secuencia a DNA")
}
# Para encontar la secuencia anterior al codon de inicio
# Verificar el largo de la secuencia
longt <- width(secun_prueba)
if ( longt < 20000) {
print("correcto")
} else {
print("muy larga")
}
# Codon de inicio: TAC -> ATG
codon_in <- vmatchPattern("ATG", secun_prueba)
print(codon_in[[1]][1])
inicio_codon <- readline(prompt = "Secuencia de inicio (start):" )
inicio_codon <- readline(prompt = "Secuencia de inicio (start):" )
detener <- inicio_codon - 20
inicio <- 0
inicio_codon <- as. numeric(readline(prompt = "Secuencia de inicio (start):" ))
inicio_codon <- as.numeric(readline(prompt = "Secuencia de inicio (start):" ))
inicio_codon <- as.numeric(readline(prompt = "Secuencia de inicio (start): " ))
print(codon_in[[1]][1])
codon_in
cd_1 <- codon_in[[1]][1])
cd_1 <- codon_in[[1]][1]
cd_1
cd_1[1]
cd_1$start
cd_1 <- as.list(codon_in[[1]][1]
cd_1 <- as.list(codon_in[[1]][1])
cd_1$start
cd_1
cd_1 <- as.list(codon_in[[1]][1])
codon_in[[1]][1])
codon_in[[1]][1]
detener <- inicio_codon - 20
inicio <- 0
ultima <- 20
inicio_codon
while (inicio <= detener & ultima < inicio_codon ) {
inicio <- inicio + 1
primer_fd <- subseq(secun_prueba, start=inicio, end=ultima)
ultima <- ultima + 1
##### Eveluar condiciones de primer
# Patrones
tripletes <- trinucleotideFrequency(primer_fd)
patrones_malos <- tripletes[c(22, 43, 44, 16, 41, 49, 61)]
no_hay <- c(0,0,0,0,0,0,0)
comparacion <- all(patrones_malos == no_hay)
if (comparacion == TRUE) { #Seguir evaluando el primer
# Poct de CG
longt <- width(primer_fd)
cont_cg <- letterFrequency(primer_fd, "CG")
porc_cg <- (cont_cg / longt) * 100
if (porc_cg < 60 & porc_cg > 49) {#Seguir evaluando
#Temperatura: 55 - 65 째C
cont_cg <- letterFrequency(primer_fd, "CG")
cont_at <- letterFrequency(primer_fd, "AT")
temperatura <- (4*cont_cg) + (2*cont_at)
if (temperatura >54 & temperatura <66 ) {
print(primer_fd)
print(paste("Porcentaje de CG: ", porc_cg))
print(paste("Tm: ", temperatura))
}
}
}
}
##### Eveluar condiciones de primer
# Patrones
tripletes <- trinucleotideFrequency(primer_fd)patrones_malos <- tripletes[c(22, 43, 44, 16, 41, 49, 61)]
secun_prueba <- readDNAStringSet("extras/sequence2.fasta")
secun_prueba
function(secuencia) {
primer_fw <- function(secun_prueba) {
primer_fw <- function(secun_prueba) {
tipo_sec <- class(secun_prueba)
primer_fw <- function(secun_prueba) {
tipo_sec <- class(secun_prueba)
tipo_sec[1]
# Para evaluar tp de secuencia
if (tipo_sec[1] == "DNAStringSet") {
# Comprobar que no es degenerado
no_degenerado <- alphabetFrequency(secun_prueba, baseOnly=TRUE)
if (no_degenerado[5] == 0) {
# Verificar el largo de la secuencia
longt <- width(secun_prueba)
if ( longt < 20000) {
# Codon de inicio: TAC -> ATG
codon_in <- vmatchPattern("ATG", secun_prueba)
codon_in[[1]][1]
}}}}
library(Biostrings)
secun_prueba <- readDNAStringSet("extras/sequence2.fasta")
secun_prueba
primer_fw <- function(secun_prueba) {
tipo_sec <- class(secun_prueba)
tipo_sec[1]
# Para evaluar tp de secuencia
if (tipo_sec[1] == "DNAStringSet") {
# Comprobar que no es degenerado
no_degenerado <- alphabetFrequency(secun_prueba, baseOnly=TRUE)
if (no_degenerado[5] == 0) {
# Verificar el largo de la secuencia
longt <- width(secun_prueba)
if ( longt < 20000) {
# Codon de inicio: TAC -> ATG
codon_in <- vmatchPattern("ATG", secun_prueba)
codon_in[[1]][1]
}}}}
pre_fw <- function(secun_prueba) {
tipo_sec <- class(secun_prueba)
tipo_sec[1]
# Para evaluar tp de secuencia
if (tipo_sec[1] == "DNAStringSet") {
# Comprobar que no es degenerado
no_degenerado <- alphabetFrequency(secun_prueba, baseOnly=TRUE)
if (no_degenerado[5] == 0) {
# Verificar el largo de la secuencia
longt <- width(secun_prueba)
if ( longt < 20000) {
# Codon de inicio: TAC -> ATG
codon_in <- vmatchPattern("ATG", secun_prueba)
codon_in[[1]][1]
}}}}
pre_fw(secun_prueba)
pre_fw <- function(secun_prueba) {
tipo_sec <- class(secun_prueba)
tipo_sec[1]
# Para evaluar tp de secuencia
if (tipo_sec[1] == "DNAStringSet") {
# Comprobar que no es degenerado
no_degenerado <- alphabetFrequency(secun_prueba, baseOnly=TRUE)
if (no_degenerado[5] == 0) {
# Verificar el largo de la secuencia
longt <- width(secun_prueba)
if ( longt < 20000) {
# Codon de inicio: TAC -> ATG
codon_in <- vmatchPattern("ATG", secun_prueba)
codon_in[[1]][1]
}}} else { print("Cambiar a DNA")}
}
pre_fw(secun_prueba)
primer_fw <-function(inicio_codon) {
detener <- inicio_codon - 20
inicio <- 0
ultima <- 20
while (inicio <= detener & ultima < inicio_codon ) {
inicio <- inicio + 1
primer_fd <- subseq(secun_prueba, start=inicio, end=ultima)
ultima <- ultima + 1
##### Eveluar condiciones de primer
# Patrones
tripletes <- trinucleotideFrequency(primer_fd)
patrones_malos <- tripletes[c(22, 43, 44, 16, 41, 49, 61)]
no_hay <- c(0,0,0,0,0,0,0)
comparacion <- all(patrones_malos == no_hay)
if (comparacion == TRUE) { #Seguir evaluando el primer
# Poct de CG
longt <- width(primer_fd)
cont_cg <- letterFrequency(primer_fd, "CG")
porc_cg <- (cont_cg / longt) * 100
if (porc_cg < 60 & porc_cg > 49) {#Seguir evaluando
#Temperatura: 55 - 65 째C
cont_cg <- letterFrequency(primer_fd, "CG")
cont_at <- letterFrequency(primer_fd, "AT")
temperatura <- (4*cont_cg) + (2*cont_at)
if (temperatura >54 & temperatura <66 ) {
print(primer_fd)
print(paste("Porcentaje de CG: ", porc_cg))
print(paste("Tm: ", temperatura))
}
}
}
}
}
primer_fw(122)
primer_fw <-function(inicio_codon, secun_prueba) {
detener <- inicio_codon - 20
inicio <- 0
ultima <- 20
while (inicio <= detener & ultima < inicio_codon ) {
inicio <- inicio + 1
primer_fd <- subseq(secun_prueba, start=inicio, end=ultima)
ultima <- ultima + 1
##### Eveluar condiciones de primer
# Patrones
tripletes <- trinucleotideFrequency(primer_fd)
patrones_malos <- tripletes[c(22, 43, 44, 16, 41, 49, 61)]
no_hay <- c(0,0,0,0,0,0,0)
comparacion <- all(patrones_malos == no_hay)
if (comparacion == TRUE) { #Seguir evaluando el primer
# Poct de CG
longt <- width(primer_fd)
cont_cg <- letterFrequency(primer_fd, "CG")
porc_cg <- (cont_cg / longt) * 100
if (porc_cg < 60 & porc_cg > 49) {#Seguir evaluando
#Temperatura: 55 - 65 째C
cont_cg <- letterFrequency(primer_fd, "CG")
cont_at <- letterFrequency(primer_fd, "AT")
temperatura <- (4*cont_cg) + (2*cont_at)
if (temperatura >54 & temperatura <66 ) {
print(primer_fd)
print(paste("Porcentaje de CG: ", porc_cg))
print(paste("Tm: ", temperatura))
}
}
}
}
}
secun_prueba1 <- readDNAStringSet("extras/sequence2.fasta")
secun_prueba1
pre_fw(secun_prueba1)
primer_fw(122, secun_prueba1)
library(Biostrings)
secun_prueba1 <- readDNAStringSet("extras/sequence2.fasta")
secun_prueba1
pre_fw <- function(secun_prueba) {
tipo_sec <- class(secun_prueba)
tipo_sec[1]
# Para evaluar tp de secuencia
if (tipo_sec[1] == "DNAStringSet") {
# Comprobar que no es degenerado
no_degenerado <- alphabetFrequency(secun_prueba, baseOnly=TRUE)
if (no_degenerado[5] == 0) {
# Verificar el largo de la secuencia
longt <- width(secun_prueba)
if ( longt < 20000) {
# Codon de inicio: TAC -> ATG
codon_in <- vmatchPattern("ATG", secun_prueba)
codon_in[[1]][1]
} else { print("La capacidad maxima es de 20,000 nucleotidos")}}} else { print("Cambiar a DNA")}
}
pre_fw(secun_prueba1)
primer_fw <-function(inicio_codon, secun_prueba, ultima) {
detener <- inicio_codon - 20
inicio <- 0
while (inicio <= detener & ultima < inicio_codon ) {
inicio <- inicio + 1
primer_fd <- subseq(secun_prueba, start=inicio, end=ultima)
ultima <- ultima + 1
##### Eveluar condiciones de primer
# Patrones
tripletes <- trinucleotideFrequency(primer_fd)
patrones_malos <- tripletes[c(22, 43, 44, 16, 41, 49, 61)]
no_hay <- c(0,0,0,0,0,0,0)
comparacion <- all(patrones_malos == no_hay)
if (comparacion == TRUE) { #Seguir evaluando el primer
# Poct de CG
longt <- width(primer_fd)
cont_cg <- letterFrequency(primer_fd, "CG")
porc_cg <- (cont_cg / longt) * 100
if (porc_cg < 60 & porc_cg > 49) {#Seguir evaluando
#Temperatura: 55 - 65 째C
cont_cg <- letterFrequency(primer_fd, "CG")
cont_at <- letterFrequency(primer_fd, "AT")
temperatura <- (4*cont_cg) + (2*cont_at)
if (temperatura >54 & temperatura <66 ) {
print(primer_fd)
print(paste("Porcentaje de CG: ", porc_cg))
print(paste("Tm: ", temperatura))
}
}
}
}
}
primer_fw(122, secun_prueba1, 17)
primer_fw(122, secun_prueba1, 20)
primer_fw(122, secun_prueba1, 19)
primer_fw(122, secun_prueba1, 18)
pre_fw(secun_prueba1)
primer_fw(122, secun_prueba1, 18) ##poner el valor de  interger
##### Primer con TGA
revertida <-reverse(secun_prueba1)
revertida
vmatchPattern("AGT",revertida)->tga
tga
primer_rev_ct1<-function(tga1,secrev) {
detener <- tga1 - 20
inicio <- 0
ultima <- 20
while (inicio <= detener & ultima < tga1 ) {
inicio <- inicio + 1
primer_rv<- subseq(revertida, start=inicio, end=ultima)
ultima <- ultima + 1
final<-complement(primer_rv)#la secuencia complentaria
tripletes <- trinucleotideFrequency(final)#patrones que favorecen horquillas,
#d챠meros..
patrones_malos <- tripletes[c(22, 43, 44, 16, 41, 49, 61)]
no_hay <- c(0,0,0,0,0,0,0)
comparacion <- all(patrones_malos == no_hay)
tolerancia<-sum(patrones_malos!=0)#dificil que se cumplan todos, agregar
#tolerancia y reportarla
if (comparacion == TRUE | tolerancia == 1) {
longt <- width(primer_rv)#revisar %gc
cont_cg <- letterFrequency(primer_rv, "CG")
porc_cg <- (cont_cg / longt) * 100
if (porc_cg < 60 & porc_cg > 49){
cont_cg <- letterFrequency(primer_rv, "CG")
cont_at <- letterFrequency(primer_rv, "AT")
temperatura <- (4*cont_cg) + (2*cont_at) ##Tm
if (temperatura >54 & temperatura <66 ) {
print("reverse tga")
print(primer_rv)
print(paste("Porcentaje de CG: ", porc_cg))
print(paste("Tm: ", temperatura))
print(paste(tolerancia))
}
}
}
}
}
primer_rev_ct1<-function(tga1,secrev,ultima) {
detener <- tga1 - 20
inicio <- 0
while (inicio <= detener & ultima < tga1 ) {
inicio <- inicio + 1
primer_rv<- subseq(revertida, start=inicio, end=ultima)
ultima <- ultima + 1
final<-complement(primer_rv)#la secuencia complentaria
tripletes <- trinucleotideFrequency(final)#patrones que favorecen horquillas,
#d챠meros..
patrones_malos <- tripletes[c(22, 43, 44, 16, 41, 49, 61)]
no_hay <- c(0,0,0,0,0,0,0)
comparacion <- all(patrones_malos == no_hay)
tolerancia<-sum(patrones_malos!=0)#dificil que se cumplan todos, agregar
#tolerancia y reportarla
if (comparacion == TRUE | tolerancia == 1) {
longt <- width(primer_rv)#revisar %gc
cont_cg <- letterFrequency(primer_rv, "CG")
porc_cg <- (cont_cg / longt) * 100
if (porc_cg < 60 & porc_cg > 49){
cont_cg <- letterFrequency(primer_rv, "CG")
cont_at <- letterFrequency(primer_rv, "AT")
temperatura <- (4*cont_cg) + (2*cont_at) ##Tm
if (temperatura >54 & temperatura <66 ) {
print("reverse tga")
print(primer_rv)
print(paste("Porcentaje de CG: ", porc_cg))
print(paste("Tm: ", temperatura))
print(paste(tolerancia))
}
}
}
}
}
primer_rev_ct1(114,revertida, 20)#primers con TGA, puedes, jugar con los valores de
secun_prueba1
revertida
vmatchPattern("AGT",revertida)->tga
tga
tag
vmatchPattern("GAT",revertida)->tag
tag
####################
# Primers con TAA
vmatchPattern("AAT",revertida)->taa
taa
vmatchPattern("GAT",revertida)->tag
vmatchPattern("GAT",revertida)->tag
tag
primer_rev_ct2<-function(tag1,secrev,ultima) {
detener <- tag1 - ultima
inicio <- 0
while (inicio <= detener & ultima < tag1 ) {
inicio <- inicio + 1
primer_rv<- subseq(revertida, start=inicio, end=ultima)
ultima <- ultima + 1
final<-complement(primer_rv)##secuencia complementaria
tripletes <- trinucleotideFrequency(primer_rv)#revisar patrones indeseados
patrones_malos <- tripletes[c(22, 43, 44, 16, 41, 49, 61)]
no_hay <- c(0,0,0,0,0,0,0)
comparacion <- all(patrones_malos == no_hay)
tolerancia<-sum(patrones_malos!=0)#M찼s complejo que se cumplan requerimientos
if (comparacion == TRUE | tolerancia==1) {
longt <- width(primer_rv)#%gc
cont_cg <- letterFrequency(primer_rv, "CG")
porc_cg <- (cont_cg / longt) * 100
if (porc_cg < 61 & porc_cg > 49) {##%gc
cont_cg <- letterFrequency(primer_rv, "CG")
cont_at <- letterFrequency(primer_rv, "AT")
temperatura <- (4*cont_cg) + (2*cont_at) ##Tm
if (temperatura >54 & temperatura <66 ) {
print("reverse tag")
print(primer_rv)
print(paste("Porcentaje de CG: ", porc_cg))
print(paste("Tm: ", temperatura))
print(paste(tolerancia))
}
}
}
}
}
primer_rev_ct2(53,revertida, 20)#reverse TAG,sujeto a que tenga este patr처n,puedes
primer_rev_ct2(222,revertida, 20)#reverse TAG,sujeto a que tenga este patr처n,puedes
primer_fw <-function(inicio_codon, secun_prueba, ultima) {
detener <- inicio_codon - ultima
inicio <- 0
while (inicio <= detener & ultima < inicio_codon ) {
inicio <- inicio + 1
primer_fd <- subseq(secun_prueba, start=inicio, end=ultima)
ultima <- ultima + 1
final<-complement(primer_fd)
##### Eveluar condiciones de primer
# Patrones
tripletes <- trinucleotideFrequency(final)
patrones_malos <- tripletes[c(22, 43, 44, 16, 41, 49, 61)]
no_hay <- c(0,0,0,0,0,0,0)
comparacion <- all(patrones_malos == no_hay)
if (comparacion == TRUE) { #Seguir evaluando el primer
# Poct de CG: 50-60 %
longt <- width(final)
cont_cg <- letterFrequency(final, "CG")
porc_cg <- (cont_cg / longt) * 100
if (porc_cg < 61 & porc_cg > 49) {#Seguir evaluando
#Temperatura: 55 - 65 째C
cont_cg <- letterFrequency(final, "CG")
cont_at <- letterFrequency(final, "AT")
temperatura <- (4*cont_cg) + (2*cont_at)
if (temperatura >54 & temperatura <66 ) {
print("Forward")
print(final)
print(paste("Porcentaje de CG: ", porc_cg))
print(paste("Tm: ", temperatura))
}
}
}
}
}
primer_fw(122, secun_prueba1, 18) # Colocar el valor del start , secuencia, long del primer.
