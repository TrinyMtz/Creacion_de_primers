lista_primerfd
while (inicio <= detener) {
inicio <- inicio + 1
primer_fd <- subseq(secun_prueba, start=inicio, end=ultima)
print(primer_fd)
lista_primerfd <- data.frame(secuencia = primer_fd)
ultima <- ultima + 1
##### Eveluar condiciones de primer
lista_primerfd$secuencia <- primer_fd
}
lista_primerfd
print(primer_fd)
while (inicio <= detener) {
inicio <- inicio + 1
primer_fd <- subseq(secun_prueba, start=inicio, end=ultima)
print(primer_fd)
lista_primerfd <- data.frame(secuencia = primer_fd)
ultima <- ultima + 1
##### Eveluar condiciones de primer
lista_primerfd$secuencia <- primer_fd
}
while (inicio <= detener) {
inicio <- inicio + 1
primer_fd <- subseq(secun_prueba, start=inicio, end=ultima)
print(primer_fd)
ultima <- ultima + 1
##### Eveluar condiciones de primer
}
detener <- 68
inicio <- 0
ultima <- 24
while (inicio <= detener) {
inicio <- inicio + 1
primer_fd <- subseq(secun_prueba, start=inicio, end=ultima)
print(primer_fd)
lista_primerfd <- data.frame(secuencia = primer_fd)
ultima <- ultima + 1
##### Eveluar condiciones de primer
lista_primerfd$secuencia <- primer_fd
}
lista_primerfd
detener <- 68
inicio <- 0
ultima <- 24
while (inicio <= detener) {
inicio <- inicio + 1
primer_fd <- subseq(secun_prueba, start=inicio, end=ultima)
print(primer_fd)
lista_primerfd <- DNAStringSet(primer_fd)
ultima <- ultima + 1
##### Eveluar condiciones de primer
}
lista_primerfd
detener <- 68
inicio <- 0
ultima <- 24
while (inicio <= detener & ultima < 92 ) {
inicio <- inicio + 1
primer_fd <- subseq(secun_prueba, start=inicio, end=ultima)
print(primer_fd)
lista_primerfd <- DNAStringSet(primer_fd)
ultima <- ultima + 1
##### Eveluar condiciones de primer
}
primer_fd
width(primer_fd)
letterFrequency(primer_fd, "CG")
longt <- width(primer_fd)
cont_cg <- letterFrequency(primer_fd, "CG")
porc_cg <- (cont_cg / longt) * 100
porc_cg
## Generador de secuencias. Desplazamiento del marco de lect de n+1 a 18
detener <- 74
inicio <- 0
ultima <- 18
while (inicio <= detener & ultima < 92 ) {
inicio <- inicio + 1
primer_fd <- subseq(secun_prueba, start=inicio, end=ultima)
print(primer_fd)
ultima <- ultima + 1
##### Eveluar condiciones de primer
}
vmatchPattern("GGG", secun_prueba)
vmatchPattern("GGG", primer_fd)
vmatchPattern("CCC", primer_fd)
trinucleotideFrequency(primer_fd)
tripletes <- trinucleotideFrequency(primer_fd)
tripletes("CCC")
tripletes$AAA
tripletes[22]
tripletes[22, 43]
tripletes[c(22, 43)]
tripletes[c(22, 43, 44, 16, 41, 49, 61)]
no_hay <- c(0,0,0,0,0,0,0)
no_hay
patrones_malos <- tripletes[c(22, 43, 44, 16, 41, 49, 61)]
no_hay <- c(0,0,0,0,0,0,0)
no_hay
patrones_malos == no_hay
all(patrones_malos == no_hay)
cont_at <- letterFrequency(primer_fd, "AT")
### TEMPERATURA
# Formula: TM = 4GC + 2AT
cont_cg <- letterFrequency(primer_fd, "CG")
temperatura <- 4(cont_cg) + 2(cont_at)
#  Tm entre los 55 - 65
as.numeric(cont_at)
as.numeric(cont_cg)
detener <- 72
inicio <- 0
ultima <- 20
while (inicio <= detener & ultima < 92 ) {
inicio <- inicio + 1
primer_fd <- subseq(secun_prueba, start=inicio, end=ultima)
print(primer_fd)
ultima <- ultima + 1
##### Eveluar condiciones de primer
}
primer_fd # Ultima secuencia que me dio
### CONTENIDO DE CG
longt <- width(primer_fd)
### CONTENIDO DE CG
longt <- width(primer_fd)
cont_cg <- letterFrequency(primer_fd, "CG")
porc_cg <- (cont_cg / longt) * 100
tripletes <- trinucleotideFrequency(primer_fd)
patrones_malos <- tripletes[c(22, 43, 44, 16, 41, 49, 61)]
longt
cont_cg
porc_cg <- (cont_cg / longt) * 100
porc_cg
tripletes <- trinucleotideFrequency(primer_fd)
patrones_malos <- tripletes[c(22, 43, 44, 16, 41, 49, 61)]
no_hay <- c(0,0,0,0,0,0,0)
no_hay
all(patrones_malos == no_hay)
patrones_malos
all(patrones_malos == no_hay)
### TEMPERATURA
# Formula: TM = 4GC + 2AT
cont_cg <- letterFrequency(primer_fd, "CG")
cont_at <- letterFrequency(primer_fd, "AT")
cont_cg
cont_at
#  Tm entre los 55 - 65
as.numeric(cont_at)
as.numeric(cont_cg)
temperatura <- 4(cont_cg) + 2(cont_at)
temperatura <- 4(cont_cg) + 2(cont_at)
cont_at
cont_at <- as.numeric(letterFrequency(primer_fd, "AT"))
cont_at
### TEMPERATURA
# Formula: TM = 4GC + 2AT
cont_cg <- as.numeric(letterFrequency(primer_fd, "CG"))
cont_cg
cont_at <- as.numeric(letterFrequency(primer_fd, "AT"))
cont_at
#  Tm entre los 55 - 65
as.numeric(cont_at)
as.numeric(cont_cg)
#  Tm entre los 55 - 65
temperatura <- 4(cont_cg) + 2(cont_at)
### TEMPERATURA
# Formula: TM = 4GC + 2AT
cont_cg <- letterFrequency(primer_fd, "CG")
cont_cg
cont_at <- letterFrequency(primer_fd, "AT")
cont_at
#  Tm entre los 55 - 65
temperatura <- (4*cont_cg) + (2*cont_at)
temperatura
detener <- 72
inicio <- 0
ultima <- 20
while (inicio <= detener & ultima < 92 ) {
inicio <- inicio + 1
primer_fd <- subseq(secun_prueba, start=inicio, end=ultima)
ultima <- ultima + 1
##### Eveluar condiciones de primer
# Patrones
tripletes <- trinucleotideFrequency(primer_fd)
patrones_malos <- tripletes[c(22, 43, 44, 16, 41, 49, 61)]
no_hay <- c(0,0,0,0,0,0,0)
comparacion <- all(patrones_malos == no_hay)
if (comparacion == TRUE) { #Seguir evaluando el primer
# Poct de CG
longt <- width(primer_fd)
cont_cg <- letterFrequency(primer_fd, "CG")
porc_cg <- (cont_cg / longt) * 100
if (porc_cg < 60 & porc_cg > 50) {#Seguir evaluando
#Temperatura: 55 - 65 °C
cont_cg <- letterFrequency(primer_fd, "CG")
cont_at <- letterFrequency(primer_fd, "AT")
temperatura <- (4*cont_cg) + (2*cont_at)
if (temperatura >54 & temperatura <66 ) {
print(primer_fd)
print(paste("Porcentaje de CG: ", porc_cg))
print(paste("Tm: ", temperatura))
}
}
}
}
# Para evaluar tp de secuencia
if (tipo_sec[1] == "DNAStringSet") {
print("correcto")
} else {
print("Convierte tu secuencia a DNA")
}
# Comprobar que no es degenerado
no_degenerado <- alphabetFrequency(secun_prueba, baseOnly=TRUE)
no_degenerado[5]
if (no_degenerado[5] == 0) {
print("correcto")
} else {
print("Convierte tu secuencia a DNA")
}
# Para encontar la secuencia anterior al codon de inicio
# Verificar el largo de la secuencia
longt <- width(secun_prueba)
if ( longt < 20000) {
print("correcto")
} else {
print("muy larga")
}
# Codon de inicio: TAC
codon_in <- vmatchPattern("TAC", secun_prueba)
print(codon_in[[1]][1])
detener <- 72
inicio <- 0
ultima <- 20
while (inicio <= detener & ultima < 92 ) {
inicio <- inicio + 1
primer_fd <- subseq(secun_prueba, start=inicio, end=ultima)
print(primer_fd)
ultima <- ultima + 1
##### Eveluar condiciones de primer
}
all(patrones_malos == 0)
detener <- 72
inicio <- 0
ultima <- 20
while (inicio <= detener & ultima < 92 ) {
inicio <- inicio + 1
primer_fd <- subseq(secun_prueba, start=inicio, end=ultima)
ultima <- ultima + 1
##### Eveluar condiciones de primer
# Patrones
tripletes <- trinucleotideFrequency(primer_fd)
patrones_malos <- tripletes[c(22, 43, 44, 16, 41, 49, 61)]
no_hay <- c(0,0,0,0,0,0,0)
comparacion <- all(patrones_malos == no_hay)
if (comparacion == TRUE) { #Seguir evaluando el primer
# Poct de CG
longt <- width(primer_fd)
cont_cg <- letterFrequency(primer_fd, "CG")
porc_cg <- (cont_cg / longt) * 100
if (porc_cg < 60 & porc_cg > 49) {#Seguir evaluando
#Temperatura: 55 - 65 °C
cont_cg <- letterFrequency(primer_fd, "CG")
cont_at <- letterFrequency(primer_fd, "AT")
temperatura <- (4*cont_cg) + (2*cont_at)
if (temperatura >54 & temperatura <66 ) {
print(primer_fd)
print(paste("Porcentaje de CG: ", porc_cg))
print(paste("Tm: ", temperatura))
}
}
}
}
primer_fd
# Codon de inicio: TAC -> ATG
codon_in <- vmatchPattern("ATG", secun_prueba)
print(codon_in[[1]][1])
## Generador de secuencias. Desplazamiento del marco de lect de n+1 a 20
detener <- 72
print(codon_in[[1]][1])
prompt(hola)
prompt("hola")
prompt(print("hola: "))
print(prompt("hola: "))
print(prompt("numero: "))
print(codon_in[[1]][1])
inicio_codon <- readline(prompt = "Secuencia de inicio (start):" )
secun_prueba <- readDNAStringSet("extras/sequence2.fasta")
secun_prueba
tipo_sec <- class(secun_prueba)
tipo_sec[1]
# Para evaluar tp de secuencia
if (tipo_sec[1] == "DNAStringSet") {
print("correcto")
} else {
print("Convierte tu secuencia a DNA")
}
# Comprobar que no es degenerado
no_degenerado <- alphabetFrequency(secun_prueba, baseOnly=TRUE)
no_degenerado[5]
if (no_degenerado[5] == 0) {
print("correcto")
} else {
print("Convierte tu secuencia a DNA")
}
# Para encontar la secuencia anterior al codon de inicio
# Verificar el largo de la secuencia
longt <- width(secun_prueba)
if ( longt < 20000) {
print("correcto")
} else {
print("muy larga")
}
# Codon de inicio: TAC -> ATG
codon_in <- vmatchPattern("ATG", secun_prueba)
print(codon_in[[1]][1])
inicio_codon <- readline(prompt = "Secuencia de inicio (start):" )
inicio_codon <- readline(prompt = "Secuencia de inicio (start):" )
detener <- inicio_codon - 20
inicio <- 0
inicio_codon <- as. numeric(readline(prompt = "Secuencia de inicio (start):" ))
inicio_codon <- as.numeric(readline(prompt = "Secuencia de inicio (start):" ))
inicio_codon <- as.numeric(readline(prompt = "Secuencia de inicio (start): " ))
print(codon_in[[1]][1])
codon_in
cd_1 <- codon_in[[1]][1])
cd_1 <- codon_in[[1]][1]
cd_1
cd_1[1]
cd_1$start
cd_1 <- as.list(codon_in[[1]][1]
cd_1 <- as.list(codon_in[[1]][1])
cd_1$start
cd_1
cd_1 <- as.list(codon_in[[1]][1])
codon_in[[1]][1])
codon_in[[1]][1]
detener <- inicio_codon - 20
inicio <- 0
ultima <- 20
inicio_codon
while (inicio <= detener & ultima < inicio_codon ) {
inicio <- inicio + 1
primer_fd <- subseq(secun_prueba, start=inicio, end=ultima)
ultima <- ultima + 1
##### Eveluar condiciones de primer
# Patrones
tripletes <- trinucleotideFrequency(primer_fd)
patrones_malos <- tripletes[c(22, 43, 44, 16, 41, 49, 61)]
no_hay <- c(0,0,0,0,0,0,0)
comparacion <- all(patrones_malos == no_hay)
if (comparacion == TRUE) { #Seguir evaluando el primer
# Poct de CG
longt <- width(primer_fd)
cont_cg <- letterFrequency(primer_fd, "CG")
porc_cg <- (cont_cg / longt) * 100
if (porc_cg < 60 & porc_cg > 49) {#Seguir evaluando
#Temperatura: 55 - 65 °C
cont_cg <- letterFrequency(primer_fd, "CG")
cont_at <- letterFrequency(primer_fd, "AT")
temperatura <- (4*cont_cg) + (2*cont_at)
if (temperatura >54 & temperatura <66 ) {
print(primer_fd)
print(paste("Porcentaje de CG: ", porc_cg))
print(paste("Tm: ", temperatura))
}
}
}
}
##### Eveluar condiciones de primer
# Patrones
tripletes <- trinucleotideFrequency(primer_fd)patrones_malos <- tripletes[c(22, 43, 44, 16, 41, 49, 61)]
secun_prueba <- readDNAStringSet("extras/sequence2.fasta")
secun_prueba
function(secuencia) {
primer_fw <- function(secun_prueba) {
primer_fw <- function(secun_prueba) {
tipo_sec <- class(secun_prueba)
primer_fw <- function(secun_prueba) {
tipo_sec <- class(secun_prueba)
tipo_sec[1]
# Para evaluar tp de secuencia
if (tipo_sec[1] == "DNAStringSet") {
# Comprobar que no es degenerado
no_degenerado <- alphabetFrequency(secun_prueba, baseOnly=TRUE)
if (no_degenerado[5] == 0) {
# Verificar el largo de la secuencia
longt <- width(secun_prueba)
if ( longt < 20000) {
# Codon de inicio: TAC -> ATG
codon_in <- vmatchPattern("ATG", secun_prueba)
codon_in[[1]][1]
}}}}
library(Biostrings)
secun_prueba <- readDNAStringSet("extras/sequence2.fasta")
secun_prueba
primer_fw <- function(secun_prueba) {
tipo_sec <- class(secun_prueba)
tipo_sec[1]
# Para evaluar tp de secuencia
if (tipo_sec[1] == "DNAStringSet") {
# Comprobar que no es degenerado
no_degenerado <- alphabetFrequency(secun_prueba, baseOnly=TRUE)
if (no_degenerado[5] == 0) {
# Verificar el largo de la secuencia
longt <- width(secun_prueba)
if ( longt < 20000) {
# Codon de inicio: TAC -> ATG
codon_in <- vmatchPattern("ATG", secun_prueba)
codon_in[[1]][1]
}}}}
pre_fw <- function(secun_prueba) {
tipo_sec <- class(secun_prueba)
tipo_sec[1]
# Para evaluar tp de secuencia
if (tipo_sec[1] == "DNAStringSet") {
# Comprobar que no es degenerado
no_degenerado <- alphabetFrequency(secun_prueba, baseOnly=TRUE)
if (no_degenerado[5] == 0) {
# Verificar el largo de la secuencia
longt <- width(secun_prueba)
if ( longt < 20000) {
# Codon de inicio: TAC -> ATG
codon_in <- vmatchPattern("ATG", secun_prueba)
codon_in[[1]][1]
}}}}
pre_fw(secun_prueba)
pre_fw <- function(secun_prueba) {
tipo_sec <- class(secun_prueba)
tipo_sec[1]
# Para evaluar tp de secuencia
if (tipo_sec[1] == "DNAStringSet") {
# Comprobar que no es degenerado
no_degenerado <- alphabetFrequency(secun_prueba, baseOnly=TRUE)
if (no_degenerado[5] == 0) {
# Verificar el largo de la secuencia
longt <- width(secun_prueba)
if ( longt < 20000) {
# Codon de inicio: TAC -> ATG
codon_in <- vmatchPattern("ATG", secun_prueba)
codon_in[[1]][1]
}}} else { print("Cambiar a DNA")}
}
pre_fw(secun_prueba)
primer_fw <-function(inicio_codon) {
detener <- inicio_codon - 20
inicio <- 0
ultima <- 20
while (inicio <= detener & ultima < inicio_codon ) {
inicio <- inicio + 1
primer_fd <- subseq(secun_prueba, start=inicio, end=ultima)
ultima <- ultima + 1
##### Eveluar condiciones de primer
# Patrones
tripletes <- trinucleotideFrequency(primer_fd)
patrones_malos <- tripletes[c(22, 43, 44, 16, 41, 49, 61)]
no_hay <- c(0,0,0,0,0,0,0)
comparacion <- all(patrones_malos == no_hay)
if (comparacion == TRUE) { #Seguir evaluando el primer
# Poct de CG
longt <- width(primer_fd)
cont_cg <- letterFrequency(primer_fd, "CG")
porc_cg <- (cont_cg / longt) * 100
if (porc_cg < 60 & porc_cg > 49) {#Seguir evaluando
#Temperatura: 55 - 65 °C
cont_cg <- letterFrequency(primer_fd, "CG")
cont_at <- letterFrequency(primer_fd, "AT")
temperatura <- (4*cont_cg) + (2*cont_at)
if (temperatura >54 & temperatura <66 ) {
print(primer_fd)
print(paste("Porcentaje de CG: ", porc_cg))
print(paste("Tm: ", temperatura))
}
}
}
}
}
primer_fw(122)
primer_fw <-function(inicio_codon, secun_prueba) {
detener <- inicio_codon - 20
inicio <- 0
ultima <- 20
while (inicio <= detener & ultima < inicio_codon ) {
inicio <- inicio + 1
primer_fd <- subseq(secun_prueba, start=inicio, end=ultima)
ultima <- ultima + 1
##### Eveluar condiciones de primer
# Patrones
tripletes <- trinucleotideFrequency(primer_fd)
patrones_malos <- tripletes[c(22, 43, 44, 16, 41, 49, 61)]
no_hay <- c(0,0,0,0,0,0,0)
comparacion <- all(patrones_malos == no_hay)
if (comparacion == TRUE) { #Seguir evaluando el primer
# Poct de CG
longt <- width(primer_fd)
cont_cg <- letterFrequency(primer_fd, "CG")
porc_cg <- (cont_cg / longt) * 100
if (porc_cg < 60 & porc_cg > 49) {#Seguir evaluando
#Temperatura: 55 - 65 °C
cont_cg <- letterFrequency(primer_fd, "CG")
cont_at <- letterFrequency(primer_fd, "AT")
temperatura <- (4*cont_cg) + (2*cont_at)
if (temperatura >54 & temperatura <66 ) {
print(primer_fd)
print(paste("Porcentaje de CG: ", porc_cg))
print(paste("Tm: ", temperatura))
}
}
}
}
}
secun_prueba1 <- readDNAStringSet("extras/sequence2.fasta")
secun_prueba1
pre_fw(secun_prueba1)
primer_fw(122, secun_prueba1)
